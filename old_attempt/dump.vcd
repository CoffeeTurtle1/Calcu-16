$date
	Sat Jan 12 18:12:24 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module calcu16_tb $end
$scope module processor $end
$scope module ctrlUnit $end
$var wire 1 ! aluCarry $end
$var wire 16 " aluOut [0:15] $end
$var wire 1 # clk $end
$var wire 26 $ instruction [0:25] $end
$var wire 16 % regDataOut2 [0:15] $end
$var wire 16 & regDataOut1 [0:15] $end
$var reg 16 ' aluA [0:15] $end
$var reg 16 ( aluB [0:15] $end
$var reg 1 ) aluEnable $end
$var reg 3 * aluSel [0:2] $end
$var reg 2 + cycle [0:1] $end
$var reg 1 , instrLoad $end
$var reg 1 - pcClk $end
$var reg 16 . regDataIn [0:15] $end
$var reg 1 / regLoad $end
$var reg 3 0 regSel1 [0:2] $end
$var reg 3 1 regSel2 [0:2] $end
$var reg 3 2 regSelData [0:2] $end
$upscope $end
$upscope $end
$upscope $end
$scope module calcu16_tb $end
$scope module processor $end
$var wire 1 # clk $end
$var wire 3 3 regSelData [0:2] $end
$var wire 3 4 regSel2 [0:2] $end
$var wire 3 5 regSel1 [0:2] $end
$var wire 1 / regLoad $end
$var wire 16 6 regDataOut2 [0:15] $end
$var wire 16 7 regDataOut1 [0:15] $end
$var wire 16 8 regDataIn [0:15] $end
$var wire 1 - pcClk $end
$var wire 26 9 memDataOut [0:25] $end
$var wire 26 : instruction [0:25] $end
$var wire 1 , instrLoad $end
$var wire 3 ; aluSel [0:2] $end
$var wire 16 < aluOut [0:15] $end
$var wire 1 ) aluEnable $end
$var wire 1 ! aluCarry $end
$var wire 16 = aluB [0:15] $end
$var wire 16 > aluA [0:15] $end
$var wire 16 ? address [0:15] $end
$upscope $end
$upscope $end
$scope module calcu16_tb $end
$scope module processor $end
$scope module registerFile $end
$var wire 16 @ dataIn [0:15] $end
$var wire 16 A dataOut1 [0:15] $end
$var wire 16 B dataOut2 [0:15] $end
$var wire 3 C dataSel [0:2] $end
$var wire 1 / load $end
$var wire 3 D sel1 [0:2] $end
$var wire 3 E sel2 [0:2] $end
$var integer 32 F i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1000 F
bx E
bx D
bx C
bx B
bx A
bx @
b0 ?
bx >
bx =
bx <
bx ;
b10000000000000000000000 :
b10000000000000000000000 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
x/
bx .
x-
1,
b1 +
bx *
x)
bx (
bx '
bx &
bx %
b10000000000000000000000 $
1#
bx "
x!
$end
#5
0#
#10
bx 9
b1 ?
b10 +
b0 2
b0 3
b0 C
1)
b0 *
b0 ;
b0 %
b0 6
b0 B
b0 1
b0 4
b0 E
b0 &
b0 7
b0 A
b0 0
b0 5
b0 D
1-
0,
1#
#15
0#
#20
bx &
bx 7
bx A
bx %
bx 6
bx B
b11 +
1/
0-
1#
#25
0#
#30
b0 +
0)
0/
1#
#35
0#
#40
bx $
bx :
b1 +
1,
1#
#45
0#
#50
b10 ?
b10 +
1-
0,
1#
#55
0#
#60
b11 +
0-
1#
#65
0#
#70
b0 +
1#
#75
0#
#80
b1 +
1,
1#
#85
0#
#90
b11 ?
b10 +
1-
0,
1#
#95
0#
#100
b11 +
0-
1#
#105
0#
#110
b0 +
1#
#115
0#
#120
b1 +
1,
1#
#125
0#
#130
b100 ?
b10 +
1-
0,
1#
#135
0#
#140
b11 +
0-
1#
#145
0#
#150
b0 +
1#
#155
0#
#160
b1 +
1,
1#
